// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  // url      = "postgresql://postgres:RosieDore123@localhost:5431/postgres"
  url      = env("DATABASE_URL")
}


model User {
  id                          String      @id @default(uuid())
  name                        String
  email                       String      @unique
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt
  isVerified                  Boolean     @default(false)
  profilePictureUrl           String?
  professionalProfile         ProfessionalProfile?
  socialLinks                 SocialLinks?
  workflows                    Workflows[]
  accounts                    Account[]
  @@index([email])
}

model Account {
  id                 String   @id @default(uuid())
  userId             String
  provider           String   // e.g. "email" | "google"
  providerAccountId  String   // e.g. Google user id
  password           String?  // only for email provider
  verificationToken  String?  @unique
  verificationTokenExpiresAt DateTime?

  user               User     @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}



model ProfessionalProfile {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique


position String
company String
companyLocation String
bio String
portfolioUrl String?

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
 
}

model SocialLinks {

id String @id @default(uuid())
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
userId String @unique
 linkedIn String?
  facebook String?
  instagram String?
  github String?
  X String?
  youtube String?
  website String?
  createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}


model Workflows{
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  name String
  active Boolean @default(true) 
  createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
workflow_steps  Workflow_steps[]
Workflow_runs Workflow_runs[]
}

enum StepType {
  TRIGGER
  CONDITION
  ACTION
}

model Workflow_steps{
  id String @id @default(uuid())
  workflow  Workflows @relation(fields: [workflowId], references: [id], onDelete:Cascade )
  workflowId String @unique
  step_type StepType
  config Json
  order Int
  Workflow_logs Workflow_logs[]
}

enum RunStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}
model Workflow_runs {
  id String @id @default(uuid())
  workflow  Workflows @relation(fields: [workflowId], references: [id], onDelete:Cascade )
  workflowId String @unique
  status RunStatus @default(PENDING)
  logs Workflow_logs[]
  startedAt DateTime      @default(now())
  finishedAt DateTime?

}

enum LogStatus {
  SUCCESS
  FAILED
  SKIPPED
}
model Workflow_logs {
    id String @id @default(uuid())
    run Workflow_runs @relation(fields: [runId], references: [id])
    runId String
    step Workflow_steps @relation(fields: [stepId], references: [id])
    stepId String
    status LogStatus
    message String
    timestamp DateTime @default(now())
}

